name: Build Android

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Decode Keystore (for release builds on main)
        if: github.ref == 'refs/heads/main'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "$KEYSTORE_BASE64" | base64 --decode > android/bbzcloud-upload-keystore.jks
            echo "Keystore decoded successfully"
          else
            echo "Warning: KEYSTORE_BASE64 secret not found, will use debug signing"
            
          fi
        continue-on-error: true
      
      - name: Create key.properties (for release builds on main)
        if: github.ref == 'refs/heads/main'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -n "$KEYSTORE_PASSWORD" ] && [ -f "android/bbzcloud-upload-keystore.jks" ]; then
            cat > android/key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=../bbzcloud-upload-keystore.jks
          EOF
            echo "key.properties created successfully"
            echo "Keystore location: android/bbzcloud-upload-keystore.jks"
            ls -la android/bbzcloud-upload-keystore.jks
          else
            echo "Warning: Keystore or secrets not available, will use debug signing"
          fi
        continue-on-error: true
      
      - name: Generate app icons
        run: flutter pub run flutter_launcher_icons
        continue-on-error: false
      
      - name: Commit generated icons
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add android/app/src/main/res/mipmap-*/ || true
          git add ios/Runner/Assets.xcassets/AppIcon.appiconset/ || true
          git diff --quiet && git diff --staged --quiet || \
          (git commit -m "chore: regenerate app icons [skip ci]" && git push) || true
        continue-on-error: true
      
      - name: Analyze code
        run: flutter analyze --no-fatal-infos --no-fatal-warnings
      
      - name: Run tests
        run: flutter test --reporter expanded
      
      - name: Generate test coverage
        run: flutter test --coverage
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test/
          retention-days: 30
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: coverage/
          retention-days: 30
      
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30
      
      - name: Build App Bundle
        run: flutter build appbundle --release --no-tree-shake-icons
      
      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
      
      - name: Get version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release Info
        run: |
          echo "## Build Information" > release-info.txt
          echo "" >> release-info.txt
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> release-info.txt
          echo "- **Branch**: ${{ github.ref_name }}" >> release-info.txt
          echo "- **Commit**: ${{ github.sha }}" >> release-info.txt
          echo "- **Date**: $(date +'%Y-%m-%d %H:%M:%S')" >> release-info.txt
          echo "" >> release-info.txt
          echo "## Download" >> release-info.txt
          echo "" >> release-info.txt
          echo "Download the artifacts from the GitHub Actions run." >> release-info.txt
      
      - name: Upload Release Info
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release-info.txt
          retention-days: 30
      
      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f android/bbzcloud-upload-keystore.jks
          rm -f android/key.properties
  
  deploy:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android
      
      - name: Install Fastlane
        run: |
          cd android
          bundle install
      
      - name: Decode Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/bbzcloud-upload-keystore.jks
      
      - name: Create key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cat > android/key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=bbzcloud-upload-keystore.jks
          EOF
      
      - name: Create Play Store Service Account JSON
        env:
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
        run: |
          echo "$PLAY_STORE_CONFIG_JSON" > android/play-store-service-account.json
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Get version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
          VERSION_CODE=$(echo $VERSION | cut -d'+' -f2)
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
      
      - name: Extract Changelog
        id: changelog
        run: |
          # Extract changelog for current version
          CHANGELOG=$(awk '/^## \['${{ steps.version.outputs.version_name }}'\]/,/^## \[/' CHANGELOG.md | sed '1d;$d' | sed '/^$/d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Build and Deploy to Play Store
        run: |
          cd android
          bundle exec fastlane deploy_open_testing
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Version ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### Download
            
            Die App wurde im Google Play Store Open Testing Track ver√∂ffentlicht.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cleanup
        if: always()
        run: |
          rm -f android/bbzcloud-upload-keystore.jks
          rm -f android/key.properties
          rm -f android/play-store-service-account.json
